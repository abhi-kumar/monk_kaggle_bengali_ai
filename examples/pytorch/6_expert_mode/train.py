import os
import sys
sys.path.append("../../../monk/");
import psutil

from pytorch_prototype import prototype



ptf = prototype(verbose=1);
ptf.Prototype("sample-project-1", "sample-experiment-1");



######################################################Dataset Params #################################################################
ptf.Dataset_Params(dataset_path="../../../monk/system_check_tests/datasets/dataset_cats_dogs_train", split=0.9,
        input_size=224, batch_size=16, shuffle_data=True, num_processors=3);
#################################################################################################################################################








########################################################### Transforms ####################################################
ptf.apply_random_horizontal_flip(train=True, val=True);
ptf.apply_normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], train=True, val=True, test=True);
#################################################################################################################################################


############################################ Auxiliary Functions - List all available transforms #########################################
ptf.List_Transforms()
######################################################################################################################################








########################################################## Set Dataset ###################################################################
ptf.Dataset();
##########################################################################################################################################






######################################################Model Params #################################################################
ptf.Model_Params(model_name="resnet18", freeze_base_network=True, use_gpu=True, use_pretrained=True);
##########################################################################################################################################


############################################ Auxiliary Functions - List all available models #########################################
ptf.List_Models();
######################################################################################################################################








#################################################   Apply additional layers to model ####################################################################
ptf.append_dropout(probability=0.1);
ptf.append_linear(final_layer=True);
######################################################################################################################################


############################################ Auxiliary Functions - List all available layers and activations #########################################
ptf.List_Layers();
ptf.List_Activations();
######################################################################################################################################




########################################################## Set Model ###################################################################
ptf.Model();
##########################################################################################################################################


############################################ Auxiliary Functions - Freeze Layers #########################################
ptf.Freeze_Layers(num=10);
######################################################################################################################################





########################################################## Training Params ###################################################################
ptf.Training_Params(num_epochs=2, display_progress=True, display_progress_realtime=True, 
        save_intermediate_models=True, intermediate_model_prefix="intermediate_model_", save_training_logs=True);
######################################################################################################################################





################################################ Set Optimizer #########################################################################
ptf.optimizer_adam(0.001);
#################################################################################################################################################


############################################ Auxiliary Functions - List all available optimizers #########################################
ptf.List_Optimizers();
######################################################################################################################################







################################################ Set Learning rate schedulers #################################################################
ptf.lr_fixed();
#################################################################################################################################################


############################################ Auxiliary Functions - List all available schedulers #########################################
ptf.List_Schedulers();
######################################################################################################################################








################################################ Set Loss #################################################################
ptf.loss_softmax_crossentropy()
#################################################################################################################################################


############################################ Auxiliary Functions - List all available losses #########################################
ptf.List_Losses();
######################################################################################################################################




ptf.Train();