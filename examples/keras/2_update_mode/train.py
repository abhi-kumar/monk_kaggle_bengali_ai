import os
import sys
sys.path.append("../../../monk/");
import psutil

from keras_prototype import prototype



ktf = prototype(verbose=1);
ktf.Prototype("sample-project-1", "sample-experiment-1");


ktf.Default(dataset_path="../../../monk/system_check_tests/datasets/dataset_cats_dogs_train", 
    			model_name="resnet50", freeze_base_network=True, num_epochs=2);




###################################################   Dataset Updates    ######################################################################
ktf.update_input_size(256);
ktf.update_batch_size(6);
ktf.update_shuffle_data(True);
ktf.update_num_processors(psutil.cpu_count());
ktf.update_trainval_split(0.6);
ktf.update_dataset(dataset_path=["../../../monk/system_check_tests/datasets/dataset_cats_dogs_train", 
						"../../../monk/system_check_tests/datasets/dataset_cats_dogs_eval"]);
#################################################################################################################################################









###################################################   Transforms Updates    ######################################################################
# Reset Transforms if required
ktf.reset_transforms();
ktf.reset_transforms(test=True);
# Apply new transforms
ktf.apply_random_horizontal_flip(train=True, val=True);
ktf.apply_mean_subtraction(mean=[0.485, 0.456, 0.406], train=True, val=True, test=True);
#################################################################################################################################################


############################################ Auxiliary Functions - List all available transforms #########################################
ktf.List_Transforms()
######################################################################################################################################












#################################################   Model Updates ################################################################################
ktf.update_model_name("resnet50");
ktf.update_use_gpu(True);
ktf.update_use_pretrained(True);
ktf.update_freeze_base_network(True);
ktf.update_freeze_layers(10);
#################################################################################################################################################


############################################ Auxiliary Functions - List all available models #########################################
ktf.List_Models();
######################################################################################################################################






#################################################   Apply additional layers to model ####################################################################
ktf.append_dropout(probability=0.1);
ktf.append_linear();
ktf.append_softmax(final_layer=True);
######################################################################################################################################


############################################ Auxiliary Functions - List all available layers and activations #########################################
ktf.List_Layers();
ktf.List_Activations();
######################################################################################################################################







################################################# Training Param Updates ##########################################################################
ktf.update_num_epochs(5);
ktf.update_display_progress_realtime(False);    
ktf.update_display_progress(True);
ktf.update_save_intermediate_models(False); 
ktf.update_save_training_logs(True);
#################################################################################################################################################



###################################### Necessary Function to make model and datasetchanges as per updates ###########################################
ktf.Reload();
#################################################################################################################################################








################################################ Update Optimizer #########################################################################
ktf.optimizer_sgd(0.0001);
#################################################################################################################################################


############################################ Auxiliary Functions - List all available optimizers #########################################
ktf.List_Optimizers();
######################################################################################################################################







################################################ Update Learning rate schedulers #################################################################
ktf.lr_fixed();
#################################################################################################################################################


############################################ Auxiliary Functions - List all available schedulers #########################################
ktf.List_Schedulers();
######################################################################################################################################








################################################ Update Loss #################################################################
ktf.loss_crossentropy()
#################################################################################################################################################


############################################ Auxiliary Functions - List all available losses #########################################
ktf.List_Losses();
######################################################################################################################################






ktf.Train();





